{"version":3,"sources":["Models/userModel.js","Controllers/accountController.js","Controllers/Redux/authSlice.js","Views/Auth/login.jsx","Views/Auth/register.jsx","Views/Sidebar/sidebar.js","Models/bugModel.js","Controllers/bugController.js","Controllers/Redux/bugSlice.js","Controllers/priorityController.js","Views/Components/Dashboard/card.jsx","Views/Pages/Dashboard/dashboard.jsx","Views/Components/bug-card/bugCard.js","Views/Components/bug-view/component/bugViewSection.jsx","Views/Components/bug-edit-delete/editPanel.jsx","Views/Components/bug-create-edit/bugForm.jsx","Views/Components/bug-view/bugView.jsx","Views/Pages/viewBugs.jsx","App.js","Controllers/Redux/userSlice.js","index.js"],"names":["user","undefined","this","_id","name","password","role","account","fetch","then","data","json","x","userModel","slice","createSlice","initialState","admin","localStorage","getItem","LoggedIn","reducers","signIn","state","action","payload","hasOwnProperty","setItem","alert","authenticator","signOut","createUser","actions","dispatch","useDispatch","useState","formInput","setFormInput","inputChanged","e","target","value","className","placeholder","onChange","type","onClick","to","auth","useSelector","bug","details","steps","version","priority","assigned","creator","time","bugs","push","bugModel","parseInt","getBugs","sort","a","b","createBugs","Math","floor","random","Number","MAX_SAFE_INTEGER","formBody","key","encodedKey","encodeURIComponent","encodedValue","join","method","headers","body","updateBugs","markComplete","colors","level","color","props","Priority","clicked","style","count","browserHistory","useHistory","highCount","midCount","lowCount","filterBugs","filter","redirect","useEffect","length","priorityController","title","info","editClicked","deleteClicked","BugModel","bugObject","setBugObject","required","displayEdit","setDisplayEdit","newPage","window","confirm","location","reload","isDisplayed","DISPLAY_BUG","SET_DISPLAY_BUG","BugClicked","map","App","path","exact","getUser","start","reducer","combineReducers","authReducer","bugReducer","userReducer","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4ZAAeA,EAEf,SAAcA,QAEDC,GAAND,IAECE,KAAKC,IAAMH,EAAKG,IAChBD,KAAKE,KAAOJ,EAAKI,KACjBF,KAAKG,SAAWL,EAAKK,SACrBH,KAAKI,KAAON,EAAKM,OCPzB,IACIC,EAAU,GAEdC,MAHa,kDAIZC,MAAK,SAAAC,GAAO,OAAOA,EAAKC,UACxBF,MAAK,SAAAE,GAAM,oBAEOA,GAFP,IAER,IAAI,EAAJ,qBACA,CAAC,IADSC,EACV,QACIL,EAAQK,EAAER,MAAQ,IAAIS,EAAU,CAC5BV,IAAMS,EAAET,IACRC,KAAOQ,EAAER,KACTC,SAAWO,EAAEP,SACbC,KAAOM,EAAEN,QART,kCCJZ,IAAMQ,EAAQC,YAAY,CACtBX,KAAO,OACPY,aAAe,CAEXC,MAAwC,QAA/BC,aAAaC,QAAQ,SAC9BC,SAA8C,QAAlCF,aAAaC,QAAQ,aAErCE,SAAW,CACPC,OAAS,SAACC,EAAMC,GAGZ,MAAwBA,EAAOC,SDMpC,SAAuBF,EAAMnB,EAAKC,GAGlCE,EAAQmB,eAAetB,GAEnBG,EAAQH,GAAMC,UAAYA,GAGzBa,aAAaS,QAAQ,WAAW,QAChCT,aAAaS,QAAQ,QAAQ,QAC7BJ,EAAMH,SAAqD,QAAzCF,aAAaC,QAAQ,WAAW,QAClDI,EAAMN,MAA+C,QAAtCC,aAAaC,QAAQ,QAAQ,SAI5CS,MAAM,sBAKVA,MAAM,yCCzBFC,CAAcN,EADd,EAAOnB,KAAP,EAAYC,WAGhByB,QAAU,SAACP,GAEPL,aAAaS,QAAQ,WAAW,SAChCT,aAAaS,QAAQ,QAAQ,SAC7BJ,EAAMH,SAAqD,QAAzCF,aAAaC,QAAQ,WAAW,QAClDI,EAAMN,MAA+C,QAAtCC,aAAaC,QAAQ,QAAQ,SAEhDY,WAAa,SAACR,EAAMC,QAMbV,IAAf,QACO,EAAoCA,EAAMkB,QAAnCV,EAAP,EAAOA,OAAOQ,EAAd,EAAcA,Q,GAAd,EAAsBC,W,YCzBd,aACX,IAAME,EAAWC,cACjB,EAAiCC,mBAAS,CAEtC/B,KAAO,GACPC,SAAW,KAHf,mBAAO+B,EAAP,KAAiBC,EAAjB,KAMA,SAASC,EAAaC,GAElBF,EAAa,2BACND,GADK,kBAEPG,EAAEC,OAAOpC,KAAQmC,EAAEC,OAAOC,SASnC,OACI,sBAAKC,UAAU,UAAf,UACI,uBAAMA,UAAU,cAAhB,UACI,wCACA,uBAAOtC,KAAK,OAAOuC,YAAY,OAAOC,SAAUN,EAAcG,MAAOL,EAAUhC,OAC/E,uBAAOA,KAAK,WAAWyC,KAAK,WAAWF,YAAY,WAAWC,SAAUN,EAAcG,MAAOL,EAAU/B,WACvG,wBAAQwC,KAAK,SAASC,QAXlC,SAAeP,GAEXN,EAASX,EAAOc,KASR,mBACA,cAAC,IAAD,CAAMW,GAAG,YAAT,yBAEJ,wBAAQL,UAAU,SAAlB,SACI,yDCjCD,aACX,MAAiCP,mBAAS,CAEtC/B,KAAO,GACPC,SAAW,KAHf,mBAAO+B,EAAP,KAAiBC,EAAjB,KAMA,SAASC,EAAaC,GAElBF,EAAa,2BACND,GADK,kBAEPG,EAAEC,OAAOpC,KAAQmC,EAAEC,OAAOC,SASnC,OACI,sBAAKC,UAAU,UAAf,UACI,uBAAMA,UAAU,cAAhB,UACI,wCACA,uBAAOtC,KAAK,OAAOuC,YAAY,OAAOC,SAAUN,EAAcG,MAAOL,EAAUhC,OAC/E,uBAAOA,KAAK,WAAWyC,KAAK,WAAWF,YAAY,WAAWC,SAAUN,EAAcG,MAAOL,EAAU/B,WACvG,wBAAQwC,KAAK,SAASC,QAXlC,SAAkBP,KAWN,SAAyC,cAAC,IAAD,CAAMQ,GAAG,IAAT,2BAE7C,wBAAQL,UAAU,SAAlB,SACI,yD,OC3BD,G,MAAA,WACX,IAAMT,EAAWC,cACVc,EAAQC,aAAY,SAAA1B,GAAK,OAAEA,KAA3ByB,KAOP,OACI,sBAAKN,UAAU,UAAf,UACI,cAAC,IAAD,CAAMA,UAAU,WAAWK,GAAG,IAA9B,SACI,qBAAKL,UAAU,QAAf,2BAEJ,+BACI,6BACI,cAAC,IAAD,CAAMK,GAAG,IAAIL,UAAU,WAAvB,yBAEJ,6BACI,cAAC,IAAD,CAAMK,GAAG,YAAYL,UAAU,WAA/B,yBAEHM,EAAK/B,OAAS,6BACX,cAAC,IAAD,CAAM8B,GAAG,UAAUL,UAAU,WAA7B,2BAEJ,0BAIJ,wBAAQA,UAAU,kBAAkBI,QAxB5C,WAEIb,EAASH,MAsBL,0BClCGoB,EAEf,SAAaA,QAEDjD,GAALiD,IAEChD,KAAKC,IAAM+C,EAAI/C,IACfD,KAAKE,KAAO8C,EAAI9C,KAChBF,KAAKiD,QAAUD,EAAIC,QACnBjD,KAAKkD,MAAQF,EAAIE,MACjBlD,KAAKmD,QAAUH,EAAIG,QACnBnD,KAAKoD,SAAWJ,EAAII,SACpBpD,KAAKqD,SAAWL,EAAIK,SACpBrD,KAAKsD,QAAUN,EAAIM,QACnBtD,KAAKuD,KAAOP,EAAIO,OCZxB,IAAIC,EAAO,GAGXlD,MAFa,qDAGZC,MAAK,SAAAC,GAAO,OAAOA,EAAKC,UACxBF,MAAK,SAAAE,GAAO,IAAD,gBACOA,GADP,IACR,IAAI,EAAJ,qBACA,CAAC,IADSC,EACV,QACI8C,EAAKC,KAAK,IAAIC,EAAS,CACnBzD,IAAM0D,SAASjD,EAAET,KACjBC,KAAOQ,EAAER,KACT+C,QAAUvC,EAAEuC,QACZC,MAAQxC,EAAEwC,MACVC,QAAUzC,EAAEyC,QACZE,SAAW3C,EAAE2C,SACbC,QAAU5C,EAAE4C,QACZF,SAAWO,SAASjD,EAAE0C,UACtBG,KAAO7C,EAAE6C,SAZT,kCCHZ,IAAM3C,EAAQC,YAAY,CACtBX,KAAO,MACPY,aAAe,GACfK,SAAW,CACPyC,QAAU,SAACvC,GAAD,ODiBDmC,EAAK5C,QAAQiD,MAAK,SAACC,EAAEC,GAAO,OAAOD,EAAEV,SAAWW,EAAEX,aChB3DY,WAAa,SAAC3C,EAAMC,GAEhB,MAAyEA,EAAOC,QAAzErB,EAAP,EAAOA,KAAM+C,EAAb,EAAaA,QAASC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,QAAoCI,GAAjE,EAAsCH,SAAtC,EAAgDC,SAAhD,EAAyDC,QAAzD,EAAiEC,MAC3D/C,EAAO,IAAIkD,EAAS,CACtBzD,IAAMgE,KAAKC,MAAMD,KAAKE,SAAWC,OAAOC,kBAAoB,EAC5DnE,KAAOA,EACP+C,QAAUA,EACVC,MAAQA,EACRC,QAAUA,EACVC,SAAW,EACXC,SAAW,KACXC,QAAU,KACVC,KAAOA,IAIPe,EAAW,GAEf,IAAK,IAAIC,KAAO/D,EAChB,CACI,IAAIgE,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmBjE,EAAK+D,IAC3CD,EAASb,KAAKe,EAAa,IAAME,GAGrCJ,EAAWA,EAASK,KAAK,KAYzBrE,MATa,oDACG,CACZsE,OAAS,OACTC,QAAU,CACN,eAAgB,mDAEpBC,KAAOR,KAKfS,WAAa,SAAC1D,EAAMC,GAEhB,MAA8EA,EAAOC,QAA9EtB,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,KAAM+C,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,MAAOC,EAAlC,EAAkCA,QAAoCI,GAAtE,EAA2CH,SAA3C,EAAqDC,SAArD,EAA8DC,QAA9D,EAAsEC,MAChE/C,EAAO,IAAIkD,EAAS,CACtBzD,IAAMA,EACNC,KAAOA,EACP+C,QAAUA,EACVC,MAAQA,EACRC,QAAUA,EACVC,SAAW,EACXC,SAAW,KACXC,QAAU,KACVC,KAAOA,IAIPe,EAAW,GAEf,IAAK,IAAIC,KAAO/D,EAChB,CACI,IAAIgE,EAAaC,mBAAmBF,GAChCG,EAAeD,mBAAmBjE,EAAK+D,IAC3CD,EAASb,KAAKe,EAAa,IAAME,GAGrCJ,EAAWA,EAASK,KAAK,KAYzBrE,MATa,oDACG,CACZsE,OAAS,MACTC,QAAU,CACN,eAAgB,mDAEpBC,KAAOR,KAKfU,aAAe,SAAC3D,EAAMC,GAElB,IAAOrB,EAAOqB,EAAOC,QAAdtB,IAGHqE,EAAW,GACfA,EAASb,KAAK,OAASgB,mBAAmBxE,IAC1CqE,EAAWA,EAASK,KAAK,KAYzBrE,MATa,oDACG,CACZsE,OAAS,SACTC,QAAU,CACN,eAAgB,mDAEpBC,KAAOR,QAQR1D,IAAf,QACO,EAAqDA,EAAMkB,QAApD8B,EAAP,EAAOA,QAAQI,EAAf,EAAeA,WAAWe,EAA1B,EAA0BA,WAAWC,EAArC,EAAqCA,aChHtCC,EAAS,CAAC,MAAM,UAAU,SAEjB,WAAC7B,GAEZ,MAAM,CACF8B,MAFU,CAAC,OAAO,SAAS,OAEZ9B,EAAS,GACxB+B,MAAQF,EAAO7B,EAAS,KCFjB,G,MAAA,SAACgC,GACZ,MAAsBC,EAASD,EAAMhC,UAA9B8B,EAAP,EAAOA,MAAMC,EAAb,EAAaA,MAEb,OACI,sBAAK3C,UAAU,iBAAiBI,QAASwC,EAAME,QAAQC,MAAO,CAACJ,MAAMA,GAArE,UACI,yCAAYD,KACZ,4BAAIE,EAAMI,aCJP,aACX,IAAMzD,EAAWC,cACXwB,EAAOT,aAAY,SAAA1B,GAAK,OAAEA,EAAMmC,QAChCiC,EAAiBC,cACnBC,EAAY,EACZC,EAAW,EACXC,EAAW,EASf,SAASC,EAAW1C,GAChB,OAAOI,EAAKuC,QAAO,SAAC/C,GAChB,OAAOA,EAAII,UAAYA,KAI/B,SAAS4C,IACLP,EAAehC,KAAK,aAOxB,YArBS1D,GAANyD,IAECmC,EAAYG,EAAW,GACvBF,EAAWE,EAAW,GACtBD,EAAWC,EAAW,IAa1BG,qBAAU,WACNlE,EAAS6B,OACX,MAAS7D,GAARyD,IAGC,sBAAKhB,UAAU,iBAAf,UACI,cAAC,EAAD,CAAMY,SAAS,IAAIoC,MAAOG,EAAUO,OAAQZ,QAASU,IACrD,cAAC,EAAD,CAAM5C,SAAS,IAAIoC,MAAOI,EAASM,OAAQZ,QAASU,IACpD,cAAC,EAAD,CAAM5C,SAAS,IAAIoC,MAAOK,EAASK,OAAQZ,QAASU,QCnClD,G,MAAA,SAACZ,GACX,MAAgCA,EAAMpC,IAA/B9C,EAAP,EAAOA,KAAKkD,EAAZ,EAAYA,SAASD,EAArB,EAAqBA,QACrB,EAAsBgD,EAAmB/C,GAAlC8B,EAAP,EAAOA,MAAMC,EAAb,EAAaA,MAMb,OACI,sBAAK3C,UAAU,WAAWI,QAL9B,WACIwC,EAAME,QAAQpF,IAI8BqF,MAAO,CAACJ,MAAQA,GAA5D,UACI,oBAAI3C,UAAU,OAAd,SAAsBtC,IACtB,oBAAIsC,UAAU,WAAd,SAA0B0C,IAC1B,oBAAI1C,UAAU,UAAd,SAAyBW,SCbtB,G,MAAA,SAACiC,GACZ,OACI,sBAAK5C,UAAU,eAAf,UACI,6BAAK4C,EAAMgB,QACX,4BAAIhB,EAAMiB,YCJP,G,MAAA,SAACjB,GACZ,OACI,sBAAK5C,UAAU,aAAf,UACI,wBAAQI,QAASwC,EAAMkB,YAAvB,kBACA,wBAAQ1D,QAASwC,EAAMmB,cAAvB,yBCAG,G,MAAA,SAACnB,GACZ,IAAMrD,EAAWC,cACjB,EAAiCC,mBAAS,IAAIuE,EAASpB,EAAMpC,MAA7D,mBAAOyD,EAAP,KAAiBC,EAAjB,KAEA,SAAStE,EAAaC,GAClBqE,EAAa,2BACND,GADK,kBAEPpE,EAAEC,OAAOpC,KAAQmC,EAAEC,OAAOC,SAmBnC,OACI,sBAAKC,UAAU,aAAf,UACoB,YAAf4C,EAAMgB,OAAuB,wBAAQxD,QAASwC,EAAME,QAAS9C,UAAU,YAA1C,eAC9B,6BAAK4C,EAAMgB,QACX,iCACI,0CACA,uBAAOlG,KAAK,OAAOuC,YAAY,WAAWkE,UAAQ,EAACjE,SAAUN,EAAcG,MAAOkE,EAAUvG,OAC5F,6CACA,0BAAUA,KAAK,UAAUuC,YAAY,kCAAkCkE,UAAQ,EAACjE,SAAUN,EAAcG,MAAOkE,EAAUxD,UACzH,2CACA,0BAAU/C,KAAK,QAAQuC,YAAY,4BAA4BkE,UAAQ,EAACjE,SAAUN,EAAcG,MAAOkE,EAAUvD,QACjH,8CACA,yBAAQhD,KAAK,WAAWyG,UAAQ,EAACjE,SAAUN,EAAcG,MAAOkE,EAAUrD,SAA1E,UACI,wBAAQb,MAAM,IAAd,kBACA,wBAAQA,MAAM,IAAd,iBACA,wBAAQA,MAAM,IAAd,oBAEJ,8CACA,wBAAQrC,KAAK,WAAWwC,SAAUN,EAAcG,MAAOkE,EAAUpD,SAAjE,SACI,wDAEJ,6CACA,wBAAQnD,KAAK,UAAUwC,SAAUN,EAAcG,MAAOkE,EAAUnD,QAAhE,SACI,wDAEJ,0CACA,0BAAUpD,KAAK,OAAOuC,YAAY,0BAA0BkE,UAAQ,EAACjE,SAAUN,EAAcG,MAAOkE,EAAUlD,OAC9G,yDACA,uBAAOrD,KAAK,UAAUuC,YAAY,sBAAsBC,SAAUN,EAAcG,MAAOkE,EAAUtD,UACjG,wBAAQR,KAAK,SAASC,QA5ClC,SAAsBP,GAGF,cAAb+C,EAAMgB,OAELrE,EAASiC,EAAWyC,IACpB/E,MAAM,gBAEW,YAAb0D,EAAMgB,QAEVrE,EAASgD,EAAW0B,IACpB/E,MAAM,gBAiCF,SAA8C0D,EAAMgB,gBCrDrD,G,MAAA,SAAChB,GACZ,IAAMrD,EAAWC,cACXgB,EAAM,IAAIwD,EAASpB,EAAMpC,KAC/B,EAAqCf,oBAAS,GAA9C,mBAAO2E,EAAP,KAAmBC,EAAnB,KAEA,SAASC,IACLD,GAAgBD,GAapB,OACI,sCAIKA,GAAe,sBAAKpE,UAAU,WAAf,UACZ,cAAC,EAAD,CAAW8D,YAAaQ,EAASP,cAhB7C,SAAuBlE,GAChB0E,OAAOC,QAAQ,+CAGdjF,EAASiD,EAAahC,IACtBtB,MAAM,eACNqF,OAAOE,SAASC,QAAO,OAWnB,wBAAQtE,QAASwC,EAAME,QAAS9C,UAAU,YAA1C,eACA,6BAAKQ,EAAI9C,OACT,cAAC,EAAD,CAAakG,MAAM,UAAUC,KAAMrD,EAAIC,UACvC,cAAC,EAAD,CAAamD,MAAM,QAAQC,KAAMrD,EAAIE,QACrC,cAAC,EAAD,CAAakD,MAAM,WAAWC,KAAMrD,EAAII,WACxC,cAAC,EAAD,CAAagD,MAAM,UAAUC,KAAMrD,EAAIM,UACvC,cAAC,EAAD,CAAa8C,MAAM,cAAcC,KAAMrD,EAAIG,UAC3C,cAAC,EAAD,CAAaiD,MAAM,eAAeC,KAAMrD,EAAIO,UAMhDqD,GAAe,cAAC,EAAD,CAAStB,QAASwB,EAASV,MAAM,WAAWpD,IAAKA,SC1C9D,aACV,MAAsCf,mBAAS,CAC3C/B,KAAO,GACPiH,aAAc,IAFlB,mBAAOC,EAAP,KAAmBC,EAAnB,KAIMtF,EAAWC,cACVwB,EAAQT,aAAY,SAAA1B,GAAK,OAAEA,KAA3BmC,KAOP,SAAS8D,EAAWpH,GAChBmH,EAAgB,CACZF,aAAeC,EAAYD,YAC3BjH,KAAOA,IAIf,OAXA+F,qBAAU,WACNlE,EAAS6B,OACX,CAACJ,EAAK0C,OAAS,IAUb,sBAAK1D,UAAU,iBAAf,WAGS4E,EAAYD,aAAe3D,EAAK+D,KAAI,SAACvE,EAAIuB,GAAL,OACjC,cAAC,EAAD,CAAmBvB,IAAKA,EAAKsC,QAASgC,GAAxB/C,MAOlB6C,EAAYD,aAAe,cAAC,EAAD,CAAS7B,QAASgC,EAAYtE,IAAKQ,EAAKuC,QAAO,SAAC/C,GAAD,OAAQA,EAAI9C,MAAQkH,EAAYlH,QAAM,SCEjHsH,MA9Bf,WAEE,IAAO1E,EAAQC,aAAY,SAAA1B,GAAK,OAAEA,KAA3ByB,KAEP,OACE,cAAC,IAAD,UAEEA,EAAK5B,SACL,qCACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuG,KAAK,IAAIC,OAAK,EAArB,SAAsB,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,YAAZ,SAAwB,cAAC,EAAD,MACxB,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,qBAAKjF,UAAU,iBAAf,SACE,cAAC,EAAD,CAAW4D,MAAM,yBAMzB,qCACE,cAAC,IAAD,CAAOqB,KAAK,IAAZ,SAAgB,cAAC,EAAD,MAChB,cAAC,IAAD,CAAOA,KAAK,YAAZ,SAAwB,cAAC,EAAD,YC/B1B7G,EAAQC,YAAY,CACtBX,KAAO,OACPY,aAAe,CAAC,IAChBK,SAAW,CACPwG,QAAU,SAACtG,GACPA,EAAMoC,KAAK,CAACvD,KAAO,qBACnBmB,EAAMoC,KAAK,CAACvD,KAAO,mBAKhBU,IAAf,QCEIgH,GDDqBhH,EAAMkB,QAAjB6F,QCCF3G,aAAaC,QAAQ,kBACtBlB,IAAR6H,GAA+B,OAAVA,IAEtB5G,aAAaS,QAAQ,WAAW,SAChCT,aAAaS,QAAQ,QAAQ,UAI/B,IAAMoG,EAAUC,YAAgB,CAC9BhF,KAAOiF,EACPvE,KAAOwE,EACPlI,KAAOmI,IAGHC,EAAQC,YAAe,CAC3BN,YAGFO,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,IAAMI,WAAP,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.5eeda519.chunk.js","sourcesContent":["export default user\n\nfunction user(user)\n{\n    if(user!=undefined)\n    {\n        this._id = user._id;\n        this.name = user.name;\n        this.password = user.password;\n        this.role = user.role;\n    }\n}","import userModel from '../Models/userModel'\n\nconst curl = 'https://trackmybugs-server.herokuapp.com/auth/';\nvar account = {};\n\nfetch(curl)\n.then(data=>{return data.json()})\n.then(json=>{\n    //create a dic of users : password\n    for(const x of json)\n    {\n        account[x.name] = new userModel({\n            _id : x._id,\n            name : x.name,\n            password : x.password,\n            role : x.role\n        });\n    }\n})\n\nexport function authenticator(state,name,password){\n    /*If the name is in account dic, and password is correct, log the person in. \n    else, alert either username not found or password is incorrect*/\n    if(account.hasOwnProperty(name))\n    {\n        if(account[name].password == password)\n        {\n            //update local storage to true then convert LoggedIn and admin to bool\n            localStorage.setItem('LoggedIn','true');\n            localStorage.setItem('admin','true');\n            state.LoggedIn = (localStorage.getItem('LoggedIn','true')=='true');\n            state.admin = (localStorage.getItem('admin','true')=='true');\n        }\n        else\n        {\n            alert(\"password incorrect\");\n        }\n    }\n    else\n    {\n        alert(\"username not found. create an account\");\n    }\n}","import {createSlice} from '@reduxjs/toolkit'\nimport {authenticator} from '../accountController'\n\nconst slice = createSlice({\n    name : 'auth',\n    initialState : {\n        /*convert string to bool using equality*/\n        admin : (localStorage.getItem('admin')=='true'),\n        LoggedIn : (localStorage.getItem('LoggedIn')=='true') \n    },\n    reducers : {\n        signIn : (state,action)=>{\n            /*save the name and password from the state payload passed in. Pass in\n            state, name, password into authenticator*/\n            const {name,password} = action.payload;\n            authenticator(state,name,password);\n        },\n        signOut : (state)=>{\n            //update local storage to false then convert LoggedIn and admin to bool\n            localStorage.setItem('LoggedIn','false');\n            localStorage.setItem('admin','false');\n            state.LoggedIn = (localStorage.getItem('LoggedIn','true')=='true');\n            state.admin = (localStorage.getItem('admin','true')=='true');\n        },\n        createUser : (state,action)=>{\n\n        }\n    }\n})\n\nexport default slice.reducer;\nexport const {signIn,signOut,createUser} = slice.actions;","import React,{useState} from 'react'\nimport {useDispatch} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport {signIn} from '../../Controllers/Redux/authSlice'\nimport './login.css'\n\nexport default ()=>{\n    const dispatch = useDispatch(); //how redux commmunicates with the controllers\n    const [formInput,setFormInput] = useState({\n        /*set initial credentials to \"\" if you didn't already log in*/\n        name : \"\",\n        password : \"\"\n    })\n\n    function inputChanged(e){\n        /*change the state of the credentials to the name or password you typed*/\n        setFormInput({\n            ...formInput,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    function logIn(e){\n        /*pass in the current state of login input and let the controller handle the back-end*/ \n        dispatch(signIn(formInput));\n    }\n\n    return(\n        <div className=\"loginBG\">\n            <form className=\"login-panel\">\n                <h1>Login:</h1>\n                <input name='name' placeholder='Name' onChange={inputChanged} value={formInput.name}></input>\n                <input name='password' type='password' placeholder='Password' onChange={inputChanged} value={formInput.password}></input>\n                <button type='submit' onClick={logIn}>Login</button>\n                <Link to=\"/register\">Register</Link>\n            </form>\n            <footer className=\"footer\">\n                <div>Bug Tracker v1.1</div>\n            </footer>\n        </div>   \n    )\n}","import React,{useState} from 'react'\nimport {Link} from 'react-router-dom'\nimport './login.css'\n\nexport default ()=>{\n    const [formInput,setFormInput] = useState({\n        /*set initial credentials to \"\" if you didn't already log in*/\n        name : \"\",\n        password : \"\"\n    })\n\n    function inputChanged(e){\n        /*change the state of the credentials to the name or password you typed*/\n        setFormInput({\n            ...formInput,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    function register(e){\n        /*call controller that adds new user to database*/ \n\n    }\n\n    return(\n        <div className=\"loginBG\">\n            <form className=\"login-panel\">\n                <h1>Login:</h1>\n                <input name='name' placeholder='Name' onChange={inputChanged} value={formInput.name}></input>\n                <input name='password' type='password' placeholder='Password' onChange={inputChanged} value={formInput.password}></input>\n                <button type='submit' onClick={register}><Link to=\"/\">Register</Link></button>\n            </form>\n            <footer className=\"footer\">\n                <div>Bug Tracker v1.0</div>\n            </footer>\n        </div>   \n    )\n}","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {signOut} from '../../Controllers/Redux/authSlice'\nimport './sidebar.css'\n\nexport default ()=>{\n    const dispatch = useDispatch();\n    const {auth} = useSelector(state=>state);\n\n    function logOut(){\n        //<Link className='nav-link' to=\"/\"></Link>\n        dispatch(signOut());\n    }\n    //note: you require admin to create a bug.\n    return(\n        <div className=\"sidebar\">\n            <Link className='nav-link' to=\"/\">\n                <div className='brand'>Bug Tracker</div>\n            </Link>\n            <ul>\n                <li>\n                    <Link to=\"/\" className='nav-link'>DashBoard</Link>\n                </li>\n                <li>\n                    <Link to=\"/viewbugs\" className='nav-link'>View Bugs</Link>\n                </li>\n                {auth.admin && <li> \n                    <Link to=\"/create\" className='nav-link'>Create Bugs</Link>\n                </li>}\n                <li>\n\n                </li>\n            </ul>\n            <button className=\"nav-link logout\" onClick={logOut}>Log Out</button>\n        </div>\n    )\n}\n","export default bug\n\nfunction bug(bug)\n{\n    if(bug!=undefined)\n    {\n        this._id = bug._id;\n        this.name = bug.name;\n        this.details = bug.details;\n        this.steps = bug.steps;\n        this.version = bug.version;\n        this.priority = bug.priority;\n        this.assigned = bug.assigned;\n        this.creator = bug.creator;\n        this.time = bug.time;\n    }\n}","import bugModel from '../Models/bugModel'\n\nlet bugs = [];\nconst curl = 'https://trackmybugs-server.herokuapp.com/auth/bug';\n\nfetch(curl) \n.then(data=>{return data.json()})\n.then(json=>{\n    for(const x of json)\n    {\n        bugs.push(new bugModel({\n            _id : parseInt(x._id),\n            name : x.name,\n            details : x.details,\n            steps : x.steps,\n            version : x.version,\n            assigned : x.assigned,\n            creator : x.creator,\n            priority : parseInt(x.priority),\n            time : x.time\n        }));\n    }\n});\n\nexport function retrieveBugs(){\n    let sorted = bugs.slice().sort((a,b) => {return a.priority - b.priority});\n    return sorted;   \n}","import {createSlice} from '@reduxjs/toolkit'\nimport {retrieveBugs} from '../bugController'\nimport bugModel from '../../Models/bugModel'\n\nconst slice = createSlice({\n    name : 'bug',\n    initialState : [],\n    reducers : {\n        getBugs : (state)=>retrieveBugs(),\n        createBugs : (state,action)=>{\n            /*use a POST http request to create a bug from the state payload passed in*/\n            const {name, details, steps, version, priority, assigned,creator,time} = action.payload;\n            const data = new bugModel({\n                _id : Math.floor(Math.random() * Number.MAX_SAFE_INTEGER) + 1 , //use rng for the id\n                name : name,\n                details : details,\n                steps : steps,\n                version : version,\n                priority : 1,\n                assigned : 'me',\n                creator : 'me',\n                time : time\n            });\n\n            /*create a x-www-form-urlencoded body for the POST request*/\n            var formBody = [];\n\n            for (var key in data) \n            {\n                var encodedKey = encodeURIComponent(key);\n                var encodedValue = encodeURIComponent(data[key]);\n                formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n\n            /*now pass in options to fetch to create a POST request*/\n            const curl = 'https://trackmybugs-server.herokuapp.com/auth/bug';\n            const options = {\n                method : 'POST',\n                headers : {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                  },\n                body : formBody\n            };\n\n            fetch(curl,options);\n        },\n        updateBugs : (state,action)=>{\n            /*destructure the bug passed in from views*/\n            const {_id, name, details, steps, version, priority, assigned,creator,time} = action.payload;\n            const data = new bugModel({\n                _id : _id, \n                name : name,\n                details : details,\n                steps : steps,\n                version : version,\n                priority : 1,\n                assigned : 'me',\n                creator : 'me',\n                time : time\n            });\n\n            /*create a x-www-form-urlencoded body for the POST request*/\n            var formBody = [];\n\n            for (var key in data) \n            {\n                var encodedKey = encodeURIComponent(key);\n                var encodedValue = encodeURIComponent(data[key]);\n                formBody.push(encodedKey + \"=\" + encodedValue);\n            }\n\n            formBody = formBody.join(\"&\");\n\n            /*now pass in options to fetch to create a PUT request*/\n            const curl = 'https://trackmybugs-server.herokuapp.com/auth/bug';\n            const options = {\n                method : 'PUT',\n                headers : {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                    },\n                body : formBody\n            };\n\n            fetch(curl,options);\n        },\n        markComplete : (state,action)=>{\n            /*destructure _id of bug passed in from views*/\n            const {_id} = action.payload;\n\n            /*create a x-www-form-urlencoded body for the DELETE request*/\n            var formBody = [];\n            formBody.push(\"_id=\" + encodeURIComponent(_id));\n            formBody = formBody.join(\"&\");\n\n            /*now pass in options to fetch to create a DELETE request*/\n            const curl = 'https://trackmybugs-server.herokuapp.com/auth/bug';\n            const options = {\n                method : 'DELETE',\n                headers : {\n                    'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n                    },\n                body : formBody\n            };\n\n            fetch(curl,options);\n        }\n    }\n})\n\nexport default slice.reducer;\nexport const {getBugs,createBugs,updateBugs,markComplete} = slice.actions;","const colors = ['red','#e2cd32','green']\n\nexport default (priority)=>{\n    const level = ['High','Medium','Low']\n    return{\n        level : (level[priority-1]),\n        color : colors[priority-1]\n    }\n}","import React from 'react'\nimport Priority from '../../../Controllers/priorityController'\nimport './card.css'\n\nexport default (props)=>{\n    const {level,color} = Priority(props.priority)\n    \n    return(\n        <div className='dashboard-card' onClick={props.clicked}style={{color:color}}>\n            <h2>Total: {level}</h2>\n            <p>{props.count}</p>\n        </div>\n    )\n}","import React, { useEffect } from 'react'\nimport {useDispatch,useSelector} from 'react-redux'\nimport {useHistory} from 'react-router-dom'\nimport {getBugs} from '../../../Controllers/Redux/bugSlice'\nimport Card from '../../Components/Dashboard/card'\n\nexport default ()=>{\n    const dispatch = useDispatch();\n    const bugs = useSelector(state=>state.bugs);\n    const browserHistory = useHistory();\n    let highCount = 0;\n    let midCount = 0;\n    let lowCount = 0;\n\n    if(bugs!=undefined)\n    {\n        highCount = filterBugs(1);\n        midCount = filterBugs(2);\n        lowCount = filterBugs(3);\n    }\n\n    function filterBugs(priority){\n        return bugs.filter((bug)=>{\n            return bug.priority == priority\n        })\n    }\n\n    function redirect(){\n        browserHistory.push('/viewbugs');\n    }\n\n    useEffect(()=>{\n        dispatch(getBugs());\n    },[bugs == undefined]);\n\n    return(\n        <div className='page-container'>\n            <Card priority=\"1\" count={highCount.length} clicked={redirect}/>\n            <Card priority=\"2\" count={midCount.length} clicked={redirect}/>\n            <Card priority=\"3\" count={lowCount.length} clicked={redirect}/>\n        </div>\n    )\n}","import React from 'react'\nimport './bugCard.css'\nimport priorityController from '../../../Controllers/priorityController';\n\nexport default(props)=>{\n    const {name,priority,version} = props.bug;\n    const {level,color} = priorityController(priority);\n\n    function Clicked(){\n        props.clicked(name);\n    }\n\n    return(\n        <div className='bug-card' onClick={Clicked} style={{color : color}}>\n            <h2 className='name'>{name}</h2>\n            <h4 className='priority'>{level}</h4>\n            <h5 className='version'>{version}</h5>\n        </div>\n    )\n}","import React from 'react'\nimport './bugViewSection.css'\n\nexport default (props)=>{\n    return(\n        <div className='view-section'>\n            <h2>{props.title}</h2>\n            <p>{props.info}</p>\n        </div>\n    )\n}","import React from 'react'\nimport './editPanel.css'\n\nexport default (props)=>{\n    return(\n        <div className='edit-panel'>\n            <button onClick={props.editClicked}>Edit</button> \n            <button onClick={props.deleteClicked}>Delete</button>\n        </div>\n    )\n}","import React,{useState} from 'react'\nimport {useDispatch} from 'react-redux'\nimport {createBugs,updateBugs} from '../../../Controllers/Redux/bugSlice'\nimport BugModel from '../../../Models/bugModel';\nimport './bugForm.css'\n\n\nexport default (props)=>{\n    const dispatch = useDispatch(); //how redux commmunicates with the controllers\n    const [bugObject,setBugObject] = useState(new BugModel(props.bug));\n\n    function inputChanged(e){\n        setBugObject({\n            ...bugObject,\n            [e.target.name] : e.target.value\n        });\n    }\n\n    function createOrEdit(e){\n        /*pass in the current state of bug input and let the controller handle the back-end.\n        determine if the component is supposed to edit or create based on the props title*/\n        if(props.title=='Create Bug')\n        {\n            dispatch(createBugs(bugObject));\n            alert(\"bug created\");\n        }\n        else if(props.title==\"Edit Bug\")\n        {\n            dispatch(updateBugs(bugObject));\n            alert(\"bug edited\");\n        }\n    }\n\n    return(\n        <div className='bug-create'>\n            {props.title == 'Edit Bug' && <button onClick={props.clicked} className='close-btn'>x</button>}\n            <h1>{props.title}</h1>\n            <form>\n                <label>Name:</label>\n                <input name='name' placeholder='Bug Name' required onChange={inputChanged} value={bugObject.name}></input>\n                <label>Details:</label>\n                <textarea name='details' placeholder='Detailed description on the bug' required onChange={inputChanged} value={bugObject.details}></textarea>\n                <label>Steps:</label>\n                <textarea name='steps' placeholder='Steps to recreate the bug' required onChange={inputChanged} value={bugObject.steps}></textarea>\n                <label>Priority:</label>\n                <select name='priority' required onChange={inputChanged} value={bugObject.priority}>\n                    <option value='1'>High</option>\n                    <option value='2'>Mid</option>\n                    <option value='3'>Low</option>\n                </select>\n                <label>Assigned:</label>\n                <select name='assigned' onChange={inputChanged} value={bugObject.assigned}>\n                    <option>Andres Advincula</option>\n                </select>\n                <label>Creator:</label>\n                <select name='creator' onChange={inputChanged} value={bugObject.creator}>\n                    <option>Andres Advincula</option>\n                </select>\n                <label>Time:</label>\n                <textarea name='time' placeholder='Time when bug was found' required onChange={inputChanged} value={bugObject.time}></textarea>\n                <label>Application Version:</label>\n                <input name='version' placeholder='Application Version' onChange={inputChanged} value={bugObject.version}></input>\n                <button type='submit' onClick={createOrEdit}>{props.title}</button>\n            </form>\n        </div>\n    )\n}","import React,{useState} from 'react'\nimport ViewSection from './component/bugViewSection'\nimport BugModel from '../../../Models/bugModel'\nimport {useDispatch} from 'react-redux'\nimport {markComplete} from '../../../Controllers/Redux/bugSlice'\nimport EditPanel from '../bug-edit-delete/editPanel'\nimport EditBug from '../bug-create-edit/bugForm'\nimport './bugView.css'\n\nexport default (props)=>{\n    const dispatch = useDispatch();\n    const bug = new BugModel(props.bug);\n    const [displayEdit,setDisplayEdit] = useState(false);\n    \n    function newPage(){\n        setDisplayEdit(!displayEdit);\n    }\n\n    function deleteClicked(e){   \n        if(window.confirm('Are you sure you wish to delete this bug?'))\n        {\n            /*pass in the current bug and let the controller handle the back-end*/\n            dispatch(markComplete(bug));\n            alert(\"bug deleted\");\n            window.location.reload(true);\n        }\n    }\n\n    return(\n        <>\n        {\n            /*when edit screen is not displayed, show the bug details component. \n            EditPanel is the buttons, not the actual edit component*/\n            !displayEdit && <div className='bug-view'>\n                <EditPanel editClicked={newPage} deleteClicked={deleteClicked}/>\n                <button onClick={props.clicked} className='close-btn'>x</button>\n                <h1>{bug.name}</h1>\n                <ViewSection title='Details' info={bug.details}/>\n                <ViewSection title='Steps' info={bug.steps}/>\n                <ViewSection title='Priority' info={bug.priority}/>\n                <ViewSection title='Creator' info={bug.creator}/>\n                <ViewSection title='App Version' info={bug.version}/>\n                <ViewSection title='Time Created' info={bug.time}/>\n            </div>\n        }\n        {\n            /*when the edit screen is displayed, show the EditBug component. pass in newPage \n            as the prop for the 'close-btn' button to return to the state before you clicked edit*/\n            displayEdit && <EditBug clicked={newPage} title=\"Edit Bug\" bug={bug}/>\n        }\n        </>\n    )\n}","import React,{useEffect,useState} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {getBugs} from '../../Controllers/Redux/bugSlice'\nimport BugCard from '../Components/bug-card/bugCard'\nimport BugView from '../Components/bug-view/bugView'\n\nexport default()=>{\n    const [DISPLAY_BUG,SET_DISPLAY_BUG] = useState({\n        name : \"\",\n        isDisplayed : false\n    });\n    const dispatch = useDispatch();\n    const {bugs} = useSelector(state=>state);\n\n    /*render the bugs once or refresh*/\n    useEffect(()=>{\n        dispatch(getBugs());\n    },[bugs.length < 1]); \n\n    function BugClicked(name){\n        SET_DISPLAY_BUG({\n            isDisplayed : !DISPLAY_BUG.isDisplayed,\n            name : name\n        });\n    }\n\n    return(\n        <div className='page-container'>\n            {\n                /*When DISPLAY_BUG is not displayed, show all the bugs*/\n                !DISPLAY_BUG.isDisplayed && bugs.map((bug,key)=>(\n                    <BugCard key={key} bug={bug} clicked={BugClicked}/>\n                ))\n            }\n            {\n                /*When DISPLAY_BUG is being displayed, show BugView (bug details) component. pass in \n                BugClicked as the prop for the 'close-btn' button to return to the state before you \n                clicked the bug card*/\n                DISPLAY_BUG.isDisplayed && <BugView clicked={BugClicked} bug={bugs.filter((bug)=> bug.name == DISPLAY_BUG.name)[0]} />\n            }\n        </div>\n    )\n}","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Login from './Views/Auth/login'\nimport Register from './Views/Auth/register'\nimport {BrowserRouter as Router,Switch,Route} from 'react-router-dom'\nimport Sidebar from './Views/Sidebar/sidebar'\nimport Dashboard from './Views/Pages/Dashboard/dashboard'\nimport ViewBugPage from './Views/Pages/viewBugs'\nimport CreateBug from './Views/Components/bug-create-edit/bugForm'\n\nfunction App() {\n  /*there are three slices in the redux file: 'auth', 'bug', and 'user'. destructure 'auth'*/\n  const {auth} = useSelector(state=>state); \n\n  return (\n    <Router>\n      {\n      auth.LoggedIn ? \n      <>\n        <Sidebar/>\n        <Switch>\n          <Route path=\"/\" exact><Dashboard/></Route>\n          <Route path=\"/viewbugs\"><ViewBugPage/></Route>\n          <Route path=\"/create\">\n            <div className='page-container'>\n              <CreateBug title='Create Bug'/>\n            </div>\n          </Route>\n        </Switch>\n      </> \n      :\n      <>\n        <Route path=\"/\"><Login/></Route>\n        <Route path=\"/register\"><Register/></Route>\n      </>\n      }\n    </Router>\n  );\n}\n\nexport default App;\n","import {createSlice} from '@reduxjs/toolkit'\n\nconst slice = createSlice({\n    name : 'user',\n    initialState : [{}],\n    reducers : {\n        getUser : (state)=>{\n            state.push({name : 'Andres Advincula'})\n            state.push({name : 'John Smith'})\n        }\n    }\n})\n\nexport default slice.reducer;\nexport const {getUser} = slice.actions; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux'\nimport {configureStore,combineReducers} from '@reduxjs/toolkit'\nimport App from './App';\n\n//reducers\nimport authReducer from './Controllers/Redux/authSlice'\nimport bugReducer from './Controllers/Redux/bugSlice'\nimport userReducer from './Controllers/Redux/userSlice'\n\n/*To stay logged in after refreshing, you must configure local storage to save state. If you\nrecently started the app, set the default items to false. Otherwise let the controllers\nmanage the items. Local storage ONLY saves items as strings, so you must convert to bool.*/\nlet start = localStorage.getItem('LoggedIn');\nif(start===undefined || start === null)\n{\n  localStorage.setItem('LoggedIn','false');\n  localStorage.setItem('admin','false');\n}\n\n//Redux configuration\nconst reducer = combineReducers({\n  auth : authReducer,\n  bugs : bugReducer,\n  user : userReducer\n});\n\nconst store = configureStore({\n  reducer,\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}